{"version":3,"sources":["Client.js","Container.js","Footer.js","Notification.js","forms/AddstudentForm.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","Container","props","style","width","margin","textTransform","textAlign","children","Footer","numberofStudents","handleOpen","className","undefined","size","onClick","type","openNotification","message","description","notification","errorNotification","AddStudentForm","onSuccess","onFailure","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","fetch","headers","method","body","JSON","stringify","addNewStudent","catch","err","finally","touched","isSubmitting","submitForm","handleChange","handleBlur","handleSubmit","isValid","name","onChange","onBlur","value","placeholder","disabled","antIcon","LoadingOutlined","fontSize","spin","App","useState","openModal","setOpenModal","students","isFetching","isAddStudentModalVisible","state","setState","closeAddStudentModal","useEffect","res","console","log","httpStatus","content","length","columns","title","key","render","text","charAt","dataIndex","record","placement","onConfirm","studentId","okText","cancelText","onCancel","stopPropagation","marginBottom","dataSource","rowKey","visible","onOk","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAEMA,EAAc,SAACC,GACnB,GAAIA,EAASC,GACX,OAAOD,EAEP,IAAIE,EAAQ,IAAIC,MAAMH,EAASI,YAK/B,OAJAF,EAAMF,SAAWA,EACjBA,EAASK,OAAOC,MAAK,SAACC,GACpBL,EAAMA,MAAQK,KAETC,QAAQC,OAAOP,ICGXQ,EAZU,SAACC,GAAD,OACvB,yBACEC,MAAO,CACLC,MAAO,SACPC,OAAQ,SACRC,cAAe,aACfC,UAAW,WAGZL,EAAMM,WCQIC,G,OAdA,SAAC,GAAD,IAAGC,EAAH,EAAGA,iBAAkBC,EAArB,EAAqBA,WAArB,OACb,yBAAKC,UAAU,UACb,kBAAC,EAAD,UACwBC,IAArBH,EACC,kBAAC,IAAD,CAAQE,UAAU,SAASE,KAAK,SAC7BJ,GAED,KACJ,kBAAC,IAAD,CAAQK,QAAS,kBAAMJ,KAAcK,KAAK,WAA1C,yB,SCXAC,EAAmB,SAACD,EAAME,EAASC,GACvCC,IAAaJ,GAAM,CACjBE,UACAC,iBAYSE,EAAoB,SAACH,EAASC,GAAV,OAC/BF,EAAiB,QAASC,EAASC,I,2BCmGtBG,G,OA/GQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,UAAd,OACrB,kBAAC,IAAD,CACEC,cAAe,CAAEC,UAAW,GAAIC,SAAU,GAAIC,MAAO,GAAIC,OAAQ,IACjEC,SAAU,SAACC,GACT,IAAMC,EAAS,GAsBf,OArBKD,EAAOL,YACVM,EAAON,UAAY,uBAEhBK,EAAOJ,WACVK,EAAOL,SAAW,sBAGfI,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,SAExDI,EAAOJ,MAAQ,yBAJfI,EAAOJ,MAAQ,iBAMZG,EAAOF,OAGT,CAAC,OAAQ,SAAU,OAAQ,UAAUK,SAASH,EAAOF,UAEtDG,EAAOH,OAAS,4CAJhBG,EAAOH,OAAS,kBAMXG,GAETG,SAAU,SAACC,EAAD,GAAiC,IAArBC,EAAoB,EAApBA,eJjBG,SAACD,GAAD,OAC3BE,YAAM,eAAgB,CACpBC,QAAS,CACP,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KACpBvC,KAAKP,IIWJsD,CAAcR,GACXvC,MAAK,WACJ0B,OAEDsB,OAAM,SAACC,GACNtB,EAAUsB,MAEXC,SAAQ,WACPV,GAAc,SAInB,gBACCN,EADD,EACCA,OACAC,EAFD,EAECA,OACAgB,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,WACAC,EARD,EAQCA,aACAC,EATD,EASCA,QATD,OAYC,0BAAMnB,SAAUkB,GACd,kBAAC,IAAD,CACEzC,UAAU,QACV2C,KAAK,YACLC,SAAUL,EACVM,OAAQL,EACRM,MAAO3B,EAAOL,UACdiC,YAAY,yBAEb3B,EAAON,WAAasB,EAAQtB,WAC3B,kBAAC,IAAD,CAAKd,UAAU,OAAOoB,EAAON,WAE/B,kBAAC,IAAD,CACEd,UAAU,QACV2C,KAAK,WACLC,SAAUL,EACVM,OAAQL,EACRM,MAAO3B,EAAOJ,SACdgC,YAAY,0BAEb3B,EAAOL,UAAYqB,EAAQrB,UAC1B,kBAAC,IAAD,CAAKf,UAAU,OAAOoB,EAAOL,UAE/B,kBAAC,IAAD,CACEf,UAAU,QACV2C,KAAK,QACLvC,KAAK,QACLwC,SAAUL,EACVM,OAAQL,EACRM,MAAO3B,EAAOH,MACd+B,YAAY,+BAEb3B,EAAOJ,OAASoB,EAAQpB,OACvB,kBAAC,IAAD,CAAKhB,UAAU,OAAOoB,EAAOJ,OAE/B,kBAAC,IAAD,CACE2B,KAAK,SACLC,SAAUL,EACVM,OAAQL,EACRM,MAAO3B,EAAOF,OACd8B,YAAY,8BAEb3B,EAAOH,QAAUmB,EAAQnB,QACxB,kBAAC,IAAD,CAAKjB,UAAU,OAAOoB,EAAOH,QAE/B,kBAAC,IAAD,CACEjB,UAAU,MACVG,QAASmC,EACTlC,KAAK,SACL4C,SAAUX,GAAgBD,IAAYM,IAJxC,gBCtFFO,EACJ,kBAACC,EAAA,EAAD,CACE3D,MAAO,CACL4D,SAAU,GACV1D,OAAQ,QAEV2D,MAAI,IAwKOC,MApKf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEaF,mBAAS,CACjC,CACEG,SAAU,GAEVC,YAAY,EACZC,0BAA0B,KAPjB,mBAENC,EAFM,KAECC,EAFD,KAWPC,EAAuB,kBAAMN,GAAa,IAIhDO,qBAAU,WACRF,EAAS,CAAEH,YAAY,IL7BShC,YAAM,gBAAgBzC,KAAKP,GK+BxDO,MAAK,SAAC+E,GAAD,OACJA,EAAIhF,OAAOC,MAAK,SAACwE,GACfQ,QAAQC,IAAIT,GACZI,EAAS,CACPJ,WACAC,YAAY,UAIjBzB,OAAM,SAACpD,GACN,IAAMyB,EAAUzB,EAAMA,MAAMyB,QACtBC,EAAc1B,EAAMA,MAAMsF,WAChCF,QAAQC,IAAIrF,EAAMA,OAClB4B,EAAkBH,EAASC,GAC3BsD,EAAS,CAAEH,YAAY,SAE1B,IAGH,IAkBIU,EAAU,KAKd,GAHIR,EAAMF,aACRU,EAAU,kBAAC,EAAD,KAAYnB,IAEpBW,EAAMH,UAAYG,EAAMH,SAASY,OAAQ,CAC3C,IAAMC,EAAU,CACd,CACEC,MAAO,GACPC,IAAK,SACLC,OAAQ,SAACC,EAAMlD,GAAP,OACN,kBAAC,IAAD,CAAQtB,KAAK,SACVsB,EAAQV,UAAU6D,OAAO,GACzBnD,EAAQT,SAAS4D,OAAO,MAI/B,CACEJ,MAAO,aACPK,UAAW,YACXJ,IAAK,aAEP,CACED,MAAO,aACPK,UAAW,YACXJ,IAAK,aAEP,CACED,MAAO,YACPK,UAAW,WACXJ,IAAK,YAEP,CACED,MAAO,QACPK,UAAW,QACXJ,IAAK,SAEP,CACED,MAAO,SACPK,UAAW,SACXJ,IAAK,UAEP,CACED,MAAO,SACPC,IAAK,SACLC,OAAQ,SAACC,EAAMG,GAAP,OACN,kBAAC,WAAD,KACE,kBAAC,IAAD,CACEC,UAAU,WACVP,MAAK,0CAAqCM,EAAO/D,UAA5C,YAAyD+D,EAAO9D,UACrEgE,UAAW,kBLjGKC,EKiGeH,EAAOG,ULhGlDtD,YAAM,gBAAD,OAAiBsD,GAAa,CACjCpD,OAAQ,WACP3C,KAAKP,GAHmB,IAACsG,GKkGhBC,OAAO,aACPC,WAAW,cACXC,SAAU,SAACjG,GAAD,OAAOA,EAAEkG,oBAEnB,kBAAC,IAAD,CACEhF,KAAK,SACLD,QAAS,SAACjB,GACRA,EAAEkG,gBAAgBP,EAAOG,aAH7B,eAcV,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CACEzF,MAAO,CAAE8F,aAAc,SACvBC,WAAY1B,EAAMH,SAClBa,QAASA,EACTiB,OAAO,cAET,kBAAC,IAAD,CACEvF,UAAU,QACVuE,MAAM,kBACNiB,QAASjC,EACTkC,KAAM3B,EACNqB,SAAUrB,GAGV,kBAAC,EAAD,CACEnD,UAAW,kBAAMmD,KACjBlD,UAAW,SAACsB,GACV,IAAM5B,EAAU4B,EAAIrD,MAAMyB,QACpBC,EAAc2B,EAAIrD,MAAMsF,WAC9B1D,EAAkBH,EAASC,OAKjC,kBAAC,EAAD,CACET,iBAAkB8D,EAAMH,SAASY,OACjCtE,WAAY,kBA9IcyD,GAAa,MAmH3C,KAkCJ,OACE,6BAAMY,GAAoB,kBAAC,IAAD,CAAO7D,YAAY,uBChL7BmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAStB,OAEP,kBAAC,EAAD,MAEAuB,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnH,MAAK,SAAAoH,GACJA,EAAaC,gBAEdrE,OAAM,SAAApD,GACLoF,QAAQpF,MAAMA,EAAMyB,c","file":"static/js/main.85b42f2b.chunk.js","sourcesContent":["import fetch from \"unfetch\";\n\nconst checkStatus = (response) => {\n  if (response.ok) {\n    return response;\n  } else {\n    let error = new Error(response.statusText);\n    error.response = response;\n    response.json().then((e) => {\n      error.error = e;\n    });\n    return Promise.reject(error);\n  }\n};\n\nexport const getAllStudents = () => fetch(\"api/students\").then(checkStatus);\n\nexport const addNewStudent = (student) =>\n  fetch(\"api/students\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(student),\n  }).then(checkStatus);\n\nexport const updateStudent = (studentId, student) => {\n  fetch(`api/students/${studentId}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"PUT\",\n    body: JSON.stringify(student),\n  }).then(checkStatus);\n};\n\nexport const deleteStudent = (studentId) =>\n  fetch(`api/students/${studentId}`, {\n    method: \"DELETE\",\n  }).then(checkStatus);\n","import React from \"react\";\n\nexport const Container = (props) => (\n  <div\n    style={{\n      width: \"1400px\",\n      margin: \"0 auto\",\n      textTransform: \"capitalize\",\n      textAlign: \"center\",\n    }}\n  >\n    {props.children}\n  </div>\n);\nexport default Container;\n","import React from \"react\";\nimport Container from \"./Container\";\nimport { Button, Avatar } from \"antd\";\nimport \"./Footer.css\";\n\nconst Footer = ({ numberofStudents, handleOpen }) => (\n  <div className=\"footer\">\n    <Container>\n      {numberofStudents !== undefined ? (\n        <Avatar className=\"avatar\" size=\"large\">\n          {numberofStudents}\n        </Avatar>\n      ) : null}\n      <Button onClick={() => handleOpen()} type=\"primary\">\n        Add New Student +\n      </Button>\n    </Container>\n  </div>\n);\nexport default Footer;\n","import { notification } from \"antd\";\n\nconst openNotification = (type, message, description) => {\n  notification[type]({\n    message,\n    description,\n  });\n};\nexport const successNotification = (message, description) =>\n  openNotification(\"sucess\", message, description);\n\nexport const infosNotification = (message, description) =>\n  openNotification(\"info\", message, description);\n\nexport const warningNotification = (message, description) =>\n  openNotification(\"warning\", message, description);\n\nexport const errorNotification = (message, description) =>\n  openNotification(\"error\", message, description);\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Input, Button, Tag } from \"antd\";\nimport { addNewStudent } from \"../Client\";\nimport \"./AddStudentForm.css\";\n\nconst AddStudentForm = ({ onSuccess, onFailure }) => (\n  <Formik\n    initialValues={{ firstName: \"\", lastName: \"\", email: \"\", gender: \"\" }}\n    validate={(values) => {\n      const errors = {};\n      if (!values.firstName) {\n        errors.firstName = \"First Name required\";\n      }\n      if (!values.lastName) {\n        errors.lastName = \"Last Name required\";\n      }\n\n      if (!values.email) {\n        errors.email = \"Email Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      if (!values.gender) {\n        errors.gender = \"Gender required\";\n      } else if (\n        ![\"MALE\", \"FEMALE\", \"male\", \"female\"].includes(values.gender)\n      ) {\n        errors.gender = \"Gender must be (MALE,FEMALE,male,female)\";\n      }\n      return errors;\n    }}\n    onSubmit={(student, { setSubmitting }) => {\n      addNewStudent(student)\n        .then(() => {\n          onSuccess();\n        })\n        .catch((err) => {\n          onFailure(err);\n        })\n        .finally(() => {\n          setSubmitting(false);\n        });\n    }}\n  >\n    {({\n      values,\n      errors,\n      touched,\n      isSubmitting,\n      submitForm,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isValid,\n      /* and other goodies */\n    }) => (\n      <form onSubmit={handleSubmit}>\n        <Input\n          className=\"Input\"\n          name=\"firstName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.firstName}\n          placeholder=\"First Name E g Anis \"\n        />\n        {errors.firstName && touched.firstName && (\n          <Tag className=\"tag\">{errors.firstName}</Tag>\n        )}\n        <Input\n          className=\"Input\"\n          name=\"lastName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.lastName}\n          placeholder=\"Last Name E g Medini \"\n        />\n        {errors.lastName && touched.lastName && (\n          <Tag className=\"tag\">{errors.lastName}</Tag>\n        )}\n        <Input\n          className=\"Input\"\n          name=\"email\"\n          type=\"email\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.email}\n          placeholder=\"Email E g Test@gmail.com  \"\n        />\n        {errors.email && touched.email && (\n          <Tag className=\"tag\">{errors.email}</Tag>\n        )}\n        <Input\n          name=\"gender\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.gender}\n          placeholder=\"Gender E g MALE , FEMALE \"\n        />\n        {errors.gender && touched.gender && (\n          <Tag className=\"tag\">{errors.gender}</Tag>\n        )}\n        <Button\n          className=\"btn\"\n          onClick={submitForm}\n          type=\"submit\"\n          disabled={isSubmitting | (touched && !isValid)}\n        >\n          Submit\n        </Button>\n      </form>\n    )}\n  </Formik>\n);\n\nexport default AddStudentForm;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.css\";\nimport {\n  Avatar,\n  Table,\n  Modal,\n  Empty,\n  Button,\n  Popconfirm,\n  notification,\n} from \"antd\";\nimport { getAllStudents, deleteStudent, updateStudent } from \"./Client\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { errorNotification } from \"./Notification\";\nimport AddStudentForm from \"./forms/AddstudentForm\";\n\nconst antIcon = (\n  <LoadingOutlined\n    style={{\n      fontSize: 67,\n      margin: \"auto\",\n    }}\n    spin\n  />\n);\n\nfunction App() {\n  const [openModal, setOpenModal] = useState(false);\n  const [state, setState] = useState([\n    {\n      students: [],\n\n      isFetching: false,\n      isAddStudentModalVisible: false,\n    },\n  ]);\n  const openAddStudentModal = () => setOpenModal(true);\n  const closeAddStudentModal = () => setOpenModal(false);\n  const openNotificationWithIcon = (type, message, description) =>\n    notification[type]({ message, description });\n\n  useEffect(() => {\n    setState({ isFetching: true });\n    getAllStudents()\n      .then((res) =>\n        res.json().then((students) => {\n          console.log(students);\n          setState({\n            students,\n            isFetching: false,\n          });\n        })\n      )\n      .catch((error) => {\n        const message = error.error.message;\n        const description = error.error.httpStatus;\n        console.log(error.error);\n        errorNotification(message, description);\n        setState({ isFetching: false });\n      });\n  }, []);\n\n  // eslint-disable-next-line\n  const updateStudentForSubmit = (student) => {\n    updateStudent(student.studentId, student)\n      .then(() => {\n        openNotificationWithIcon(\n          \"success\",\n          \"Student updated\",\n          `${student.studentId} was updated`\n        );\n      })\n      .catch((err) => {\n        openNotificationWithIcon(\n          \"error\",\n          \"error\",\n          `(${err.error.status}) ${err.error.error}`\n        );\n      });\n  };\n\n  let content = null;\n\n  if (state.isFetching) {\n    content = <Container>{antIcon}</Container>;\n  }\n  if (state.students && state.students.length) {\n    const columns = [\n      {\n        title: \"\",\n        key: \"avatar\",\n        render: (text, student) => (\n          <Avatar size=\"large\">\n            {student.firstName.charAt(0)}\n            {student.lastName.charAt(0)}\n          </Avatar>\n        ),\n      },\n      {\n        title: \"Student ID\",\n        dataIndex: \"studentId\",\n        key: \"studentId\",\n      },\n      {\n        title: \"First Name\",\n        dataIndex: \"firstName\",\n        key: \"firstName\",\n      },\n      {\n        title: \"Last Name\",\n        dataIndex: \"lastName\",\n        key: \"lastName\",\n      },\n      {\n        title: \"Email\",\n        dataIndex: \"email\",\n        key: \"email\",\n      },\n      {\n        title: \"Gender\",\n        dataIndex: \"gender\",\n        key: \"gender\",\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        render: (text, record) => (\n          <Fragment>\n            <Popconfirm\n              placement=\"topRight\"\n              title={`are you sure you want to delete ${record.firstName} ${record.lastName}`}\n              onConfirm={() => deleteStudent(record.studentId)}\n              okText=\"Yes,Delete\"\n              cancelText=\"No, Keep it\"\n              onCancel={(e) => e.stopPropagation()}\n            >\n              <Button\n                type=\"danger\"\n                onClick={(e) => {\n                  e.stopPropagation(record.studentId);\n                }}\n              >\n                DELETE\n              </Button>\n            </Popconfirm>\n          </Fragment>\n        ),\n      },\n    ];\n\n    return (content = (\n      <Container>\n        <Table\n          style={{ marginBottom: \"100px\" }}\n          dataSource={state.students}\n          columns={columns}\n          rowKey=\"studentId\"\n        />\n        <Modal\n          className=\"modal\"\n          title=\"Add New Student\"\n          visible={openModal}\n          onOk={closeAddStudentModal}\n          onCancel={closeAddStudentModal}\n        >\n          {/* inside our modal  */}\n          <AddStudentForm\n            onSuccess={() => closeAddStudentModal()}\n            onFailure={(err) => {\n              const message = err.error.message;\n              const description = err.error.httpStatus;\n              errorNotification(message, description);\n            }}\n          />\n          {/*      */}\n        </Modal>\n        <Footer\n          numberofStudents={state.students.length}\n          handleOpen={() => openAddStudentModal()}\n        />\n        ;\n      </Container>\n    ));\n  }\n\n  return (\n    <div>{content ? content : <Empty description=\"No Student Found\" />}</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  //  <React.StrictMode>\n  <App />,\n  //</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}